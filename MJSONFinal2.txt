# Masking Configuration
masking.character=X
masking.unmasked.chars=4
masking.currentMicroserviceName=dis_demo

# JSON Endpoints Configuration for dis_demo microservice
masking.json.endpoints.dis_demo[0].path=/savedata
masking.json.endpoints.dis_demo[0].patterns=creditcard,accno

# XML Endpoints Configuration for dis_demo microservice
masking.xml.endpoints.dis_demo[0].path=/savedataxml
masking.xml.endpoints.dis_demo[0].xmlpaths=//creditCardNumber,//accountNumber



import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "current.microservice")
public class MicroserviceConfig {
    private String name;

    // Getters and Setters
}



import java.util.List;

public class EndpointConfig {
    private String path;
    private List<String> patterns;
    private List<String> xmlpaths;

    // Getters and Setters
}



import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import java.util.List;
import java.util.Map;

@Configuration
@ConfigurationProperties(prefix = "masking")
public class MaskingProperties {

    private Map<String, List<EndpointConfig>> json;
    private Map<String, List<EndpointConfig>> xml;
    private String character;
    private int unmaskedChars;
    private String currentMicroserviceName;

    // Getters and Setters
}



import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@Component
public class JsonMaskingUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            return processJson(json);
        } catch (IOException e) {
            // Log the exception (logging not shown here)
            return json; // Return original JSON in case of exception
        }
    }

    public static Map<String, String> maskSensitiveData(Map<String, String> jsonMap) {
        jsonMap.replaceAll((key, value) -> {
            try {
                return processJson(value);
            } catch (IOException e) {
                // Log the exception (logging not shown here)
                return value; // Return original JSON in case of exception
            }
        });
        return jsonMap;
    }

    private static String processJson(String json) throws IOException {
        JsonNode rootNode = objectMapper.readTree(json);

        List<EndpointConfig> endpointConfigs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
        if (endpointConfigs == null || endpointConfigs.isEmpty()) {
            return json; // Return original JSON if no endpoint config found
        }

        for (EndpointConfig config : endpointConfigs) {
            if (config.getPatterns() != null) {
                maskSensitiveData(rootNode, config.getPatterns().toArray(new String[0]));
            }
        }

        return objectMapper.writeValueAsString(rootNode);
    }

    private static void maskSensitiveData(JsonNode rootNode, String[] fieldsToMask) {
        if (rootNode.isObject()) {
            processObjectNode((ObjectNode) rootNode, fieldsToMask);
        } else if (rootNode.isArray()) {
            rootNode.forEach(childNode -> maskSensitiveData(childNode, fieldsToMask));
        }
    }

    private static void processObjectNode(ObjectNode objectNode, String[] fieldsToMask) {
        for (String field : fieldsToMask) {
            JsonNode childNode = objectNode.get(field);
            if (childNode != null && childNode.isTextual()) {
                String value = childNode.asText();
                String maskedValue = maskValue(value);
                objectNode.put(field, maskedValue);
            } else if (childNode != null) {
                maskSensitiveData(childNode, fieldsToMask);
            }
        }
    }

    private static String maskValue(String value) {
        if (value.length() <= maskingProperties.getUnmaskedChars()) {
            return value;
        }
        String maskCharacter = maskingProperties.getCharacter() != null ? maskingProperties.getCharacter() : "X";
        String mask = StringUtils.repeat(maskCharacter, value.length() - maskingProperties.getUnmaskedChars());
        return mask + value.substring(value.length() - maskingProperties.getUnmaskedChars());
    }
}













public enum PiiType {
    CREDIT_CARD("creditcard", "ccno", "creditcardnumber"),
    ACCOUNT_NUMBER("accno", "accountnumber", "accountno"),
    // Add other PII types here

    private final List<String> variations;

    PiiType(String... variations) {
        this.variations = Arrays.asList(variations);
    }

    public List<String> getVariations() {
        return variations;
    }
}







import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import java.util.Map;
import java.util.List;

@Configuration
@ConfigurationProperties(prefix = "masking")
public class MaskingProperties {
    private Map<String, List<String>> json; // Map of microservice name to list of PiiType keys
    private String character;
    private int unmaskedChars;

    // Getters and Setters
}






import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Component
public class JsonMaskingUtil {
    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            JsonNode rootNode = objectMapper.readTree(json);

            List<String> fieldsToMask = getFieldVariations();
            maskSensitiveData(rootNode, fieldsToMask.toArray(new String[0]));

            return objectMapper.writeValueAsString(rootNode);
        } catch (IOException e) {
            return json;
        }
    }

    private static List<String> getFieldVariations() {
        List<String> fieldsToMask = new ArrayList<>();
        List<String> piiTypes = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());

        for (String piiTypeKey : piiTypes) {
            try {
                PiiType piiType = PiiType.valueOf(piiTypeKey.toUpperCase());
                fieldsToMask.addAll(piiType.getVariations());
            } catch (IllegalArgumentException e) {
                // Log invalid PiiType key, if needed
            }
        }

        return fieldsToMask;
    }

    // Other existing methods
}
























import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Component
public class JsonMaskingUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            JsonNode rootNode = objectMapper.readTree(json);
            List<String> fieldsToMask = getFieldVariations();
            maskSensitiveData(rootNode, fieldsToMask.toArray(new String[0]));
            return objectMapper.writeValueAsString(rootNode);
        } catch (IOException e) {
            // Log the exception (logging not shown here)
            return json; // Return original JSON in case of exception
        }
    }

    public static Map<String, String> maskSensitiveData(Map<String, String> jsonMap) {
        jsonMap.replaceAll((key, value) -> {
            try {
                return maskSensitiveData(value);
            } catch (Exception e) {
                // Log the exception (logging not shown here)
                return value; // Return original JSON in case of exception
            }
        });
        return jsonMap;
    }

    private static List<String> getFieldVariations() {
        List<String> fieldsToMask = new ArrayList<>();
        List<String> variationKeys = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName()).getPatterns();

        for (String key : variationKeys) {
            Variations variation = Variations.getByVariation(key);
            if (variation != null) {
                fieldsToMask.addAll(variation.getVariations());
            }
        }

        return fieldsToMask;
    }

    private static void maskSensitiveData(JsonNode rootNode, String[] fieldsToMask) {
        if (rootNode.isObject()) {
            processObjectNode((ObjectNode) rootNode, fieldsToMask);
        } else if (rootNode.isArray()) {
            rootNode.forEach(childNode -> maskSensitiveData(childNode, fieldsToMask));
        }
    }

    private static void processObjectNode(ObjectNode objectNode, String[] fieldsToMask) {
        for (String field : fieldsToMask) {
            JsonNode childNode = objectNode.get(field);
            if (childNode != null && childNode.isTextual()) {
                String value = childNode.asText();
                String maskedValue = maskValue(value);
                objectNode.put(field, maskedValue);
            } else if (childNode != null) {
                maskSensitiveData(childNode, fieldsToMask);
            }
        }
    }

    private static String maskValue(String value) {
        if (value.length() <= maskingProperties.getUnmaskedChars()) {
            return value;
        }
        String maskCharacter = maskingProperties.getCharacter() != null ? maskingProperties.getCharacter() : "X";
        String mask = StringUtils.repeat(maskCharacter, value.length() - maskingProperties.getUnmaskedChars());
        return mask + value.substring(value.length() - maskingProperties.getUnmaskedChars());
    }
}





public Map<String, List<Variations>> getTranslatedJsonVariations() {
        return json.entrySet().stream().collect(Collectors.toMap(
            Map.Entry::getKey,
            entry -> entry.getValue().stream()
                          .map(Variations::getByVariation)
                          .filter(java.util.Objects::nonNull)
                          .collect(Collectors.toList())
        ));
    }




import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class JsonMaskingUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            JsonNode rootNode = objectMapper.readTree(json);
            List<String> fieldsToMask = getFieldsToMask();
            maskSensitiveData(rootNode, fieldsToMask.toArray(new String[0]));
            return objectMapper.writeValueAsString(rootNode);
        } catch (IOException e) {
            // Log the exception (replace with actual logging)
            return json; // Return original JSON in case of exception
        }
    }

    private static List<String> getFieldsToMask() {
        List<String> fieldsToMask = new ArrayList<>();
        List<Variations> variations = maskingProperties.getTranslatedJsonVariations().get(maskingProperties.getCurrentMicroserviceName());

        if (variations != null) {
            fieldsToMask.addAll(variations.stream()
                .flatMap(variation -> variation.getVariations().stream())
                .collect(Collectors.toList()));
        }

        return fieldsToMask;
    }

    private static void maskSensitiveData(JsonNode rootNode, String[] fieldsToMask) {
        if (rootNode.isObject()) {
            processObjectNode((ObjectNode) rootNode, fieldsToMask);
        } else if (rootNode.isArray()) {
            rootNode.forEach(childNode -> maskSensitiveData(childNode, fieldsToMask));
        }
    }

    private static void processObjectNode(ObjectNode objectNode, String[] fieldsToMask) {
        for (String field : fieldsToMask) {
            JsonNode childNode = objectNode.get(field);
            if (childNode != null && childNode.isTextual()) {
                String value = childNode.asText();
                String maskedValue = maskValue(value);
                objectNode.put(field, maskedValue);
            } else if (childNode != null) {
                maskSensitiveData(childNode, fieldsToMask);
            }
        }
    }

    private static String maskValue(String value) {
        if (value.length() <= maskingProperties.getUnmaskedChars()) {
            return value;
        }
        String maskCharacter = maskingProperties.getCharacter() != null ? maskingProperties.getCharacter() : "X";
        String mask = StringUtils.repeat(maskCharacter, value.length() - maskingProperties.getUnmaskedChars());
        return mask + value.substring(value.length() - maskingProperties.getUnmaskedChars());
    }
}









import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.List;

@Component
public class JsonMaskingUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            JsonNode rootNode = objectMapper.readTree(json);
            List<String> fieldsToMask = maskingProperties.getVariationPatternsForService(maskingProperties.getCurrentMicroserviceName());
            if (fieldsToMask == null || fieldsToMask.isEmpty()) {
                return json; // No patterns to mask
            }
            maskSensitiveData(rootNode, fieldsToMask.toArray(new String[0]));
            return objectMapper.writeValueAsString(rootNode);
        } catch (IOException e) {
            // Log the exception (logging not shown here)
            return json; // Return original JSON in case of exception
        }
    }

    private static void maskSensitiveData(JsonNode rootNode, String[] fieldsToMask) {
        if (rootNode.isObject()) {
            processObjectNode((ObjectNode) rootNode, fieldsToMask);
        } else if (rootNode.isArray()) {
            rootNode.forEach(childNode -> maskSensitiveData(childNode, fieldsToMask));
        }
    }

    private static void processObjectNode(ObjectNode objectNode, String[] fieldsToMask) {
        for (String field : fieldsToMask) {
            JsonNode childNode = objectNode.get(field);
            if (childNode != null && childNode.isTextual()) {
                String value = childNode.asText();
                String maskedValue = maskValue(value);
                objectNode.put(field, maskedValue);
            } else if (childNode != null) {
                maskSensitiveData(childNode, fieldsToMask);
            }
        }
    }

    private static String maskValue(String value) {
        if (value.length() <= maskingProperties.getUnmaskedChars()) {
            return value;
        }
        String maskCharacter = maskingProperties.getCharacter() != null ? maskingProperties.getCharacter() : "X";
        String mask = StringUtils.repeat(maskCharacter, value.length() - maskingProperties.getUnmaskedChars());
        return mask + value.substring(value.length() - maskingProperties.getUnmaskedChars());
    }
}




import java.util.Collections;
import java.util.stream.Collectors;
import java.util.List;

// ... other imports and class definition

public List<String> getVariationPatternsForService(String serviceName) {
    List<EndpointConfig> configs = this.json.getOrDefault(serviceName, Collections.emptyList());

    return configs.stream()
                  .flatMap(config -> config.getPatterns() != null ? config.getPatterns().stream() : Stream.empty())
                  .flatMap(patternKey -> {
                      Variations variation = Variations.getByVariation(patternKey);
                      return variation != null ? variation.getVariations().stream() : Stream.empty();
                  })
                  .distinct()
                  .collect(Collectors.toList());
}




import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class JsonMaskingUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json, String txnid) {
        try {
            JsonNode rootNode = objectMapper.readTree(json);
            List<String> fieldsToMask = getFieldsToMask(txnid);
            if (fieldsToMask.isEmpty()) {
                return json; // No matching path or patterns to mask
            }
            maskSensitiveData(rootNode, fieldsToMask.toArray(new String[0]));
            return objectMapper.writeValueAsString(rootNode);
        } catch (IOException e) {
            // Log the exception (logging not shown here)
            return json; // Return original JSON in case of exception
        }
    }

    private static List<String> getFieldsToMask(String txnid) {
        List<EndpointConfig> configs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
        if (configs != null) {
            for (EndpointConfig config : configs) {
                if (txnid.equals(config.getPath())) {
                    return config.getPatterns().stream()
                                  .flatMap(patternKey -> {
                                      Variations variation = Variations.getByVariation(patternKey);
                                      return variation != null ? variation.getVariations().stream() : Stream.empty();
                                  })
                                  .distinct()
                                  .collect(Collectors.toList());
                }
            }
        }
        return List.of(); // No matching txnid found
    }

    // ... existing methods for masking data
}







public class JsonMaskingUtil {

    // Other methods and fields...

    public static String maskSensitiveData(String json, String txnid) {
        // Fetch the configs for the current microservice
        List<EndpointConfig> configs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
        
        if (configs != null) {
            for (EndpointConfig config : configs) {
                if (config.getTxnid().equals(txnid)) {
                    // Apply masking based on the patterns for this txnid
                    List<String> patternsToMask = config.getPatterns();
                    // Perform masking logic here based on patternsToMask
                }
            }
        }

        return json; // Return the masked JSON
    }

    // Other methods...
}











import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.List;
import java.util.stream.Collectors;

public class JsonMaskingUtil {

    private static MaskingProperties maskingProperties; // Injected or initialized elsewhere

    public static String maskSensitiveData(String json, String txnId) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(json);

            List<String> patternsToMask = getPatternsForTxnId(txnId);
            if (patternsToMask != null) {
                maskFields(rootNode, patternsToMask);
            }

            return mapper.writeValueAsString(rootNode);
        } catch (Exception e) {
            // Handle exceptions appropriately
            return json;
        }
    }

    private static List<String> getPatternsForTxnId(String txnId) {
        List<EndpointConfig> configs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
        if (configs != null) {
            for (EndpointConfig config : configs) {
                if (config.getPath().equals(txnId)) {
                    return config.getPatterns().stream()
                            .flatMap(patternKey -> Variations.getByVariation(patternKey).getVariations().stream())
                            .distinct()
                            .collect(Collectors.toList());
                }
            }
        }
        return null;
    }

    private static void maskFields(JsonNode node, List<String> patterns) {
        if (node.isObject()) {
            ObjectNode objectNode = (ObjectNode) node;
            objectNode.fieldNames().forEachRemaining(field -> {
                if (patterns.contains(field)) {
                    objectNode.put(field, maskValue(objectNode.get(field).asText()));
                } else if (objectNode.get(field).isObject() || objectNode.get(field).isArray()) {
                    maskFields(objectNode.get(field), patterns);
                }
            });
        } else if (node.isArray()) {
            node.forEach(childNode -> maskFields(childNode, patterns));
        }
    }

    private static String maskValue(String value) {
        int unmaskedChars = maskingProperties.getUnmaskedChars();
        if (value.length() <= unmaskedChars) {
            return value;
        }

        String maskedPart = value.substring(0, value.length() - unmaskedChars).replaceAll(".", maskingProperties.getCharacter());
        return maskedPart + value.substring(value.length() - unmaskedChars);
    }
}
























import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.List;
import java.util.stream.Collectors;

public class JsonMaskingUtil {

    private static MaskingProperties maskingProperties; // Injected or initialized elsewhere

    // Existing method - Keep as is
    public static void maskSensitiveData(JsonNode rootNode, String[] fieldsToMask) {
        // Existing implementation...
    }

    public static String maskSensitiveData(String json, String txnId) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(json);

            List<String> patternsToMask = getPatternsForTxnId(txnId);
            if (patternsToMask != null) {
                maskSensitiveData(rootNode, patternsToMask.toArray(new String[0]));
            }

            return mapper.writeValueAsString(rootNode);
        } catch (Exception e) {
            // Handle exceptions appropriately
            return json;
        }
    }

    private static List<String> getPatternsForTxnId(String txnId) {
        List<EndpointConfig> configs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
        if (configs != null) {
            for (EndpointConfig config : configs) {
                if (config.getPath().equals(txnId)) {
                    return config.getPatterns().stream()
                            .flatMap(patternKey -> Variations.getByVariation(patternKey).getVariations().stream())
                            .distinct()
                            .collect(Collectors.toList());
                }
            }
        }
        return null;
    }

    // Existing method to mask fields - Keep as is or modify as needed
    private static void maskFields(JsonNode node, List<String> patterns) {
        // Existing implementation...
    }

    // Existing method to mask values - Keep as is
    private static String maskValue(String value) {
        // Existing implementation...
    }
}




private static List<String> getPatternsForTxnId(String txnId) {
    List<EndpointConfig> configs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
    if (configs != null) {
        for (EndpointConfig config : configs) {
            if (config.getPath().equals(txnId)) {
                return config.getPatterns().stream()
                        .map(patternKey -> Variations.getByVariation(patternKey))
                        .filter(Objects::nonNull)
                        .flatMap(variation -> variation.getVariations().stream())
                        .distinct()
                        .collect(Collectors.toList());
            }
        }
    }
    return null;
}








private static List<String> getPatternsForTxnId(String txnId) {
    List<EndpointConfig> configs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
    if (configs != null) {
        for (EndpointConfig config : configs) {
            if (config.getPath().equals(txnId)) {
                List<String> allPatterns = new ArrayList<>();
                for (String patternKey : config.getPatterns()) {
                    // Add the pattern itself
                    allPatterns.add(patternKey);

                    // Add variations if available
                    Variations variationEnum = Variations.getByVariation(patternKey);
                    if (variationEnum != null) {
                        allPatterns.addAll(variationEnum.getVariations());
                    }
                }
                return allPatterns.stream().distinct().collect(Collectors.toList());
            }
        }
    }
    return Collections.emptyList(); // Return an empty list instead of null for better handling
}

