# Masking Configuration
masking.character=X
masking.unmasked.chars=4
masking.currentMicroserviceName=dis_demo

# JSON Endpoints Configuration for dis_demo microservice
masking.json.endpoints.dis_demo[0].path=/savedata
masking.json.endpoints.dis_demo[0].patterns=creditcard,accno

# XML Endpoints Configuration for dis_demo microservice
masking.xml.endpoints.dis_demo[0].path=/savedataxml
masking.xml.endpoints.dis_demo[0].xmlpaths=//creditCardNumber,//accountNumber



import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "current.microservice")
public class MicroserviceConfig {
    private String name;

    // Getters and Setters
}



import java.util.List;

public class EndpointConfig {
    private String path;
    private List<String> patterns;
    private List<String> xmlpaths;

    // Getters and Setters
}



import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import java.util.List;
import java.util.Map;

@Configuration
@ConfigurationProperties(prefix = "masking")
public class MaskingProperties {

    private Map<String, List<EndpointConfig>> json;
    private Map<String, List<EndpointConfig>> xml;
    private String character;
    private int unmaskedChars;
    private String currentMicroserviceName;

    // Getters and Setters
}



import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@Component
public class JsonMaskingUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            return processJson(json);
        } catch (IOException e) {
            // Log the exception (logging not shown here)
            return json; // Return original JSON in case of exception
        }
    }

    public static Map<String, String> maskSensitiveData(Map<String, String> jsonMap) {
        jsonMap.replaceAll((key, value) -> {
            try {
                return processJson(value);
            } catch (IOException e) {
                // Log the exception (logging not shown here)
                return value; // Return original JSON in case of exception
            }
        });
        return jsonMap;
    }

    private static String processJson(String json) throws IOException {
        JsonNode rootNode = objectMapper.readTree(json);

        List<EndpointConfig> endpointConfigs = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());
        if (endpointConfigs == null || endpointConfigs.isEmpty()) {
            return json; // Return original JSON if no endpoint config found
        }

        for (EndpointConfig config : endpointConfigs) {
            if (config.getPatterns() != null) {
                maskSensitiveData(rootNode, config.getPatterns().toArray(new String[0]));
            }
        }

        return objectMapper.writeValueAsString(rootNode);
    }

    private static void maskSensitiveData(JsonNode rootNode, String[] fieldsToMask) {
        if (rootNode.isObject()) {
            processObjectNode((ObjectNode) rootNode, fieldsToMask);
        } else if (rootNode.isArray()) {
            rootNode.forEach(childNode -> maskSensitiveData(childNode, fieldsToMask));
        }
    }

    private static void processObjectNode(ObjectNode objectNode, String[] fieldsToMask) {
        for (String field : fieldsToMask) {
            JsonNode childNode = objectNode.get(field);
            if (childNode != null && childNode.isTextual()) {
                String value = childNode.asText();
                String maskedValue = maskValue(value);
                objectNode.put(field, maskedValue);
            } else if (childNode != null) {
                maskSensitiveData(childNode, fieldsToMask);
            }
        }
    }

    private static String maskValue(String value) {
        if (value.length() <= maskingProperties.getUnmaskedChars()) {
            return value;
        }
        String maskCharacter = maskingProperties.getCharacter() != null ? maskingProperties.getCharacter() : "X";
        String mask = StringUtils.repeat(maskCharacter, value.length() - maskingProperties.getUnmaskedChars());
        return mask + value.substring(value.length() - maskingProperties.getUnmaskedChars());
    }
}













public enum PiiType {
    CREDIT_CARD("creditcard", "ccno", "creditcardnumber"),
    ACCOUNT_NUMBER("accno", "accountnumber", "accountno"),
    // Add other PII types here

    private final List<String> variations;

    PiiType(String... variations) {
        this.variations = Arrays.asList(variations);
    }

    public List<String> getVariations() {
        return variations;
    }
}







import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import java.util.Map;
import java.util.List;

@Configuration
@ConfigurationProperties(prefix = "masking")
public class MaskingProperties {
    private Map<String, List<String>> json; // Map of microservice name to list of PiiType keys
    private String character;
    private int unmaskedChars;

    // Getters and Setters
}






import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Component
public class JsonMaskingUtil {
    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            JsonNode rootNode = objectMapper.readTree(json);

            List<String> fieldsToMask = getFieldVariations();
            maskSensitiveData(rootNode, fieldsToMask.toArray(new String[0]));

            return objectMapper.writeValueAsString(rootNode);
        } catch (IOException e) {
            return json;
        }
    }

    private static List<String> getFieldVariations() {
        List<String> fieldsToMask = new ArrayList<>();
        List<String> piiTypes = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName());

        for (String piiTypeKey : piiTypes) {
            try {
                PiiType piiType = PiiType.valueOf(piiTypeKey.toUpperCase());
                fieldsToMask.addAll(piiType.getVariations());
            } catch (IllegalArgumentException e) {
                // Log invalid PiiType key, if needed
            }
        }

        return fieldsToMask;
    }

    // Other existing methods
}
























import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Component
public class JsonMaskingUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static MaskingProperties maskingProperties;

    @Autowired
    public JsonMaskingUtil(MaskingProperties props) {
        JsonMaskingUtil.maskingProperties = props;
    }

    public static String maskSensitiveData(String json) {
        try {
            JsonNode rootNode = objectMapper.readTree(json);
            List<String> fieldsToMask = getFieldVariations();
            maskSensitiveData(rootNode, fieldsToMask.toArray(new String[0]));
            return objectMapper.writeValueAsString(rootNode);
        } catch (IOException e) {
            // Log the exception (logging not shown here)
            return json; // Return original JSON in case of exception
        }
    }

    public static Map<String, String> maskSensitiveData(Map<String, String> jsonMap) {
        jsonMap.replaceAll((key, value) -> {
            try {
                return maskSensitiveData(value);
            } catch (Exception e) {
                // Log the exception (logging not shown here)
                return value; // Return original JSON in case of exception
            }
        });
        return jsonMap;
    }

    private static List<String> getFieldVariations() {
        List<String> fieldsToMask = new ArrayList<>();
        List<String> variationKeys = maskingProperties.getJson().get(maskingProperties.getCurrentMicroserviceName()).getPatterns();

        for (String key : variationKeys) {
            Variations variation = Variations.getByVariation(key);
            if (variation != null) {
                fieldsToMask.addAll(variation.getVariations());
            }
        }

        return fieldsToMask;
    }

    private static void maskSensitiveData(JsonNode rootNode, String[] fieldsToMask) {
        if (rootNode.isObject()) {
            processObjectNode((ObjectNode) rootNode, fieldsToMask);
        } else if (rootNode.isArray()) {
            rootNode.forEach(childNode -> maskSensitiveData(childNode, fieldsToMask));
        }
    }

    private static void processObjectNode(ObjectNode objectNode, String[] fieldsToMask) {
        for (String field : fieldsToMask) {
            JsonNode childNode = objectNode.get(field);
            if (childNode != null && childNode.isTextual()) {
                String value = childNode.asText();
                String maskedValue = maskValue(value);
                objectNode.put(field, maskedValue);
            } else if (childNode != null) {
                maskSensitiveData(childNode, fieldsToMask);
            }
        }
    }

    private static String maskValue(String value) {
        if (value.length() <= maskingProperties.getUnmaskedChars()) {
            return value;
        }
        String maskCharacter = maskingProperties.getCharacter() != null ? maskingProperties.getCharacter() : "X";
        String mask = StringUtils.repeat(maskCharacter, value.length() - maskingProperties.getUnmaskedChars());
        return mask + value.substring(value.length() - maskingProperties.getUnmaskedChars());
    }
}


